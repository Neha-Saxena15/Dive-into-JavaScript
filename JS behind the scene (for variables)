Let's understand one basic concept of how javascript is actually work??

Whenever we run our javascript code the JS engine will create an Execution Context for that programme. (it is like creating a different enviroment )
Now this execution context will handle all the work. In this execution context the process is completed in two step 
       1. Allocating the memory to variable and function. (also known as Creation Phase)
       2. Each code will run line by line and from top to bottom. ( also known as Execution Phase )

In the creation phase each variable/constants is assigned "Undefined" ( Undefined is a keyword, will discuss later )
but in case of Functions it will assign the same block of code lines which inside the code. 
And in execution phase now when code run line by line it will assign the value which is mentioned in the code and run function only when it is called.

For e.g.
let x = 5;

now in step-1 
memory will be assigned to x and Undefined is filled in x
and in step-2 when code run now 5 will assign to x and now when we print x it will show 5.

/* To print values on console we use
console.log()

let x = 2;
console.log(x);
output - 2
*/

now if we want to see what will console show when
let x;
console.log(x) // this will print "Undefined" on the console
x = 3;
console.log(x) // this will print "3" 

now if we want to print any variable who is not declared or present inthe programme

console.log(y) // it will throw an error of "not defined"

Now Q here is that in english Undefined and not defined is same 
but in JS this is not the scene both are far different in meaning 
In output "undefined" is not an error but "not defined" is the error.
##############################################################
JS is a scripting language
Which means its code is interpreted instead of compiled

There are two types of execution contexts: global and function.
The global execution context is created when a JavaScript script first starts to run, and it represents the global scope in JavaScript.
A function execution context is created whenever a function is called, representing the function's local scope.



